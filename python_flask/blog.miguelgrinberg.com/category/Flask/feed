<?xml version="1.0" ?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel> 
    <atom:link href="http://blog.miguelgrinberg.com/category/Flask/feed" rel="self" type="application/rss+xml" />
    <title>http://blog.miguelgrinberg.com/category/Flask/feed</title>
    <link>http://blog.miguelgrinberg.com/category/Flask/feed</link>
    <description></description>
    
    <item>
    	<title>Flask-SocketIO needs your help!</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/flask-socketio-needs-your-help</link>
    	<description>&lt;p&gt;Some of you know that for the last few weeks I have been quietly but steadily working on a significant new release of Flask-SocketIO that will be labeled 1.0, and that is practically a complete rewrite. Given that this is a fairly popular extension, I would like to ask existing users to test it and provide feedback before it is officially released.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/flask-socketio-needs-your-help</guid>
        <pubDate>Sun, 09 Aug 2015 18:58:46 GMT</pubDate>
    </item>
    
    <item>
    	<title>Celery and the Flask Application Factory Pattern</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/celery-and-the-flask-application-factory-pattern</link>
    	<description>&lt;p&gt;After I published my article on using &lt;a href=&#34;http://blog.miguelgrinberg.com/post/using-celery-with-flask&#34;&gt;Celery with Flask&lt;/a&gt;, several readers asked how this integration can be done when using a large Flask application organized around the &lt;a href=&#34;http://flask.pocoo.org/docs/0.10/patterns/appfactories/&#34;&gt;application factory&lt;/a&gt; pattern. It&#39;s a very good question, as it is non-trivial to make Celery, which does not have a dedicated Flask extension, delay access to the application until the factory function is invoked.&lt;/p&gt;
&lt;p&gt;In this article I&#39;m going to describe in detail how I added Celery to &lt;a href=&#34;http://github.com/miguelgrinberg/flasky&#34;&gt;Flasky&lt;/a&gt;, the application featured in my &lt;a href=&#34;http://flaskbook.com&#34;&gt;Flask book&lt;/a&gt;.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/celery-and-the-flask-application-factory-pattern</guid>
        <pubDate>Sat, 16 May 2015 02:09:49 GMT</pubDate>
    </item>
    
    <item>
    	<title>My PyCon 2015 Sessions</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/my-pycon-2015-sessions</link>
    	<description>&lt;p&gt;In this short blog post I want to share the two presentations I gave at PyCon 2015, which are now available to watch on YouTube.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/my-pycon-2015-sessions</guid>
        <pubDate>Sun, 12 Apr 2015 15:41:11 GMT</pubDate>
    </item>
    
    <item>
    	<title>About My &#34;Flask Workshop&#34; Tutorial at PyCon 2015</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/about-my-flask-workshop-tutorial-at-pycon-2015</link>
    	<description>&lt;p&gt;&lt;center&gt;&lt;img src=&#34;/static/images/pycon-2015-flask-workshop.png&#34;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;In case you haven&#39;t heard, this year I will, once again, host a Flask class at PyCon in Montreal. The class is titled &lt;a href=&#34;https://us.pycon.org/2015/schedule/presentation/308/&#34;&gt;Flask Workshop&lt;/a&gt;, and is scheduled for Wednesday, April 8th from 9am to 12:20pm. For some reason not all the information I provided for this class has been published on the PyCon website, so in case you need some help deciding if this class is for you, I have all the details below.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/about-my-flask-workshop-tutorial-at-pycon-2015</guid>
        <pubDate>Mon, 02 Mar 2015 02:54:40 GMT</pubDate>
    </item>
    
    <item>
    	<title>Two Factor Authentication with Flask</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/two-factor-authentication-with-flask</link>
    	<description>&lt;p&gt;&lt;center&gt;&lt;iframe width=&#34;450&#34; height=&#34;253&#34; src=&#34;https://www.youtube.com/embed/kMTXL5FUHGM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;In this article I&#39;m going to introduce an authentication scheme known as &lt;em&gt;two factor authentication&lt;/em&gt;. As the name implies, this method requires the user to provide two forms of identification: a regular password and a one-time token. This greatly increases account security, because a compromised password alone is not enough to gain access, an attacker also needs to have the token, which is different every time. You can see me do a short demonstration of this technique in the video above.&lt;/p&gt;
&lt;p&gt;As usual, this article includes a complete example that implements this authentication technique in a Flask application. You may think this is going to be an advanced article that needs complex cryptographic techniques, specialized hardware and/or proprietary libraries, but in reality it requires none of the above. The solution is relatively simple to add if you already have username and password authentication in place, and can be done entirely with open standards and open-source software. There are even open-source token generation apps for your Android or iOS smartphone!&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/two-factor-authentication-with-flask</guid>
        <pubDate>Tue, 17 Feb 2015 01:26:04 GMT</pubDate>
    </item>
    
    <item>
    	<title>Using Celery With Flask</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/using-celery-with-flask</link>
    	<description>&lt;p&gt;&lt;center&gt;&lt;img src=&#34;/static/images/flask-celery.png&#34;&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;The topic of running background tasks is complex, and because of that there is a lot of confusion around it. I have tackled it in my &lt;a href=&#34;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-xi-email-support&#34;&gt;Mega-Tutorial&lt;/a&gt;, later in &lt;a href=&#34;http://bit.ly/flaskbook&#34;&gt;my book&lt;/a&gt;, and then again in much more detail in my &lt;a href=&#34;http://bit.ly/flaskapi&#34;&gt;REST API training video&lt;/a&gt;. To keep things simple, in all the examples I have used so far I have executed background tasks in threads, but I always noted that for a more scalable and production ready solution a &lt;em&gt;task queue&lt;/em&gt; such as &lt;a href=&#34;http://www.celeryproject.org/&#34;&gt;Celery&lt;/a&gt; should be used instead.&lt;/p&gt;
&lt;p&gt;My readers constantly ask me about Celery, and how a Flask application can use it, so today I am going to show you two examples that I hope will cover most application needs.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/using-celery-with-flask</guid>
        <pubDate>Thu, 01 Jan 2015 23:54:07 GMT</pubDate>
    </item>
    
    <item>
    	<title>OAuth Authentication with Flask</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/oauth-authentication-with-flask</link>
    	<description>&lt;p&gt;Many web sites offer users the option to use a streamlined single-click registration and login built on third party authentication services, typically run by the big social networks. In my &lt;a href=&#34;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins&#34;&gt;Flask Mega-Tutorial&lt;/a&gt; I showed you how to use one of these protocols, called OpenID.&lt;/p&gt;
&lt;p&gt;In this article I want to give you an introduction to the &lt;a href=&#34;http://oauth.net/&#34;&gt;OAuth&lt;/a&gt; protocol, which these days has replaced OpenID as the preferred third party authentication mechanism. I will also show you a complete Flask application that implements &#34;Sign In with Facebook&#34; and &#34;Sign In with Twitter&#34; functionality. With these two implementations as a guide you should find it easy to add any other OAuth providers you may need.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/oauth-authentication-with-flask</guid>
        <pubDate>Mon, 17 Nov 2014 15:40:16 GMT</pubDate>
    </item>
    
    <item>
    	<title>Video Streaming with Flask</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/video-streaming-with-flask</link>
    	<description>&lt;p&gt;I&#39;m sure by now you know that I have released a &lt;a href=&#34;http://flaskbook.com&#34;&gt;book and a couple of videos on Flask&lt;/a&gt; in cooperation with O&#39;Reilly Media. While the coverage of the Flask framework in these is fairly complete, there are a small number of features that for one reason or another did not get mentioned much, so I thought it would be a good idea to write articles about them here.&lt;/p&gt;
&lt;p&gt;This article is dedicated to &lt;em&gt;streaming&lt;/em&gt;, an interesting feature that gives Flask applications the ability to provide large responses efficiently partitioned in small chunks, potentially over a long period of time. To illustrate the topic I&#39;m going to show you how to build a live video streaming server!&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/video-streaming-with-flask</guid>
        <pubDate>Mon, 20 Oct 2014 04:02:03 GMT</pubDate>
    </item>
    
    <item>
    	<title>The Flask Mega-Tutorial: Now with Python 3 Support</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-now-with-python-3-support</link>
    	<description>&lt;p&gt;After more than a year working on &lt;a href=&#34;http://flaskbook.com&#34;&gt;various projects&lt;/a&gt; on the side of my day job, I have now found some time to rest and return to the blog, which I haven&#39;t cared for much during this time.&lt;/p&gt;
&lt;p&gt;The number one problem I see from my readers is issues when trying to follow my Flask Mega-Tutorial using current versions of Flask, its extensions, or Python 3. In this article I quickly describe the updates I have made to the tutorial.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-now-with-python-3-support</guid>
        <pubDate>Sun, 28 Sep 2014 01:32:37 GMT</pubDate>
    </item>
    
    <item>
    	<title>Using Flask-Babel with Flask 0.10</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/using-flask-babel-with-flask-010</link>
    	<description>&lt;p&gt;One of the interesting problems that I had to address when porting my Flask Mega-Tutorial to Flask 0.10 was in supporting Flask-Babel. There is an issue when a &#34;lazy&#34; text generated with the &lt;code&gt;lazy_gettext&lt;/code&gt; function is flashed. This issue was &lt;a href=&#34;https://github.com/mitsuhiko/flask-babel/issues/31&#34;&gt;reported&lt;/a&gt; more than a year ago and hasn&#39;t been addressed yet.&lt;/p&gt;
&lt;p&gt;In this short post I will show you how I solved this issue for the Mega-Tutorial, as this solution is applicable to any Flask project.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/using-flask-babel-with-flask-010</guid>
        <pubDate>Tue, 23 Sep 2014 16:38:06 GMT</pubDate>
    </item>
    
</channel>
</rss>