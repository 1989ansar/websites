<?xml version="1.0" ?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel> 
    <atom:link href="http://blog.miguelgrinberg.com/category/Authentication/feed" rel="self" type="application/rss+xml" />
    <title>http://blog.miguelgrinberg.com/category/Authentication/feed</title>
    <link>http://blog.miguelgrinberg.com/category/Authentication/feed</link>
    <description></description>
    
    <item>
    	<title>Two Factor Authentication with Flask</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/two-factor-authentication-with-flask</link>
    	<description>&lt;p&gt;&lt;center&gt;&lt;iframe width=&#34;450&#34; height=&#34;253&#34; src=&#34;https://www.youtube.com/embed/kMTXL5FUHGM&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;In this article I&#39;m going to introduce an authentication scheme known as &lt;em&gt;two factor authentication&lt;/em&gt;. As the name implies, this method requires the user to provide two forms of identification: a regular password and a one-time token. This greatly increases account security, because a compromised password alone is not enough to gain access, an attacker also needs to have the token, which is different every time. You can see me do a short demonstration of this technique in the video above.&lt;/p&gt;
&lt;p&gt;As usual, this article includes a complete example that implements this authentication technique in a Flask application. You may think this is going to be an advanced article that needs complex cryptographic techniques, specialized hardware and/or proprietary libraries, but in reality it requires none of the above. The solution is relatively simple to add if you already have username and password authentication in place, and can be done entirely with open standards and open-source software. There are even open-source token generation apps for your Android or iOS smartphone!&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/two-factor-authentication-with-flask</guid>
        <pubDate>Tue, 17 Feb 2015 01:26:04 GMT</pubDate>
    </item>
    
    <item>
    	<title>OAuth Authentication with Flask</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/oauth-authentication-with-flask</link>
    	<description>&lt;p&gt;Many web sites offer users the option to use a streamlined single-click registration and login built on third party authentication services, typically run by the big social networks. In my &lt;a href=&#34;http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins&#34;&gt;Flask Mega-Tutorial&lt;/a&gt; I showed you how to use one of these protocols, called OpenID.&lt;/p&gt;
&lt;p&gt;In this article I want to give you an introduction to the &lt;a href=&#34;http://oauth.net/&#34;&gt;OAuth&lt;/a&gt; protocol, which these days has replaced OpenID as the preferred third party authentication mechanism. I will also show you a complete Flask application that implements &#34;Sign In with Facebook&#34; and &#34;Sign In with Twitter&#34; functionality. With these two implementations as a guide you should find it easy to add any other OAuth providers you may need.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/oauth-authentication-with-flask</guid>
        <pubDate>Mon, 17 Nov 2014 15:40:16 GMT</pubDate>
    </item>
    
    <item>
    	<title>RESTful Authentication with Flask</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/restful-authentication-with-flask</link>
    	<description>&lt;p&gt;This article is the fourth in my series on RESTful APIs. Today I will be showing you a simple, yet secure way to protect a &lt;a href=&#34;http://flask.pocoo.org/&#34;&gt;Flask&lt;/a&gt; based API with password or token based authentication.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/restful-authentication-with-flask</guid>
        <pubDate>Thu, 28 Nov 2013 07:33:19 GMT</pubDate>
    </item>
    
    <item>
    	<title>The Flask Mega-Tutorial, Part V: User Logins</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins</link>
    	<description>&lt;p&gt;This is the fifth article in the series in which I document my experience writing web applications in &lt;a href=&#34;http://python.org&#34;&gt;Python&lt;/a&gt; using the &lt;a href=&#34;http://flask.pocoo.org&#34;&gt;Flask&lt;/a&gt; microframework.&lt;/p&gt;
&lt;p&gt;The goal of the tutorial series is to develop a decently featured microblogging application that demonstrating total lack of originality I have decided to call &lt;code&gt;microblog&lt;/code&gt;.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-v-user-logins</guid>
        <pubDate>Sat, 09 Jun 2012 06:44:24 GMT</pubDate>
    </item>
    
</channel>
</rss>