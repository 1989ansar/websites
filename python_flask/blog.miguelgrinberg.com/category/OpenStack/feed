<?xml version="1.0" ?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
<channel> 
    <atom:link href="http://blog.miguelgrinberg.com/category/OpenStack/feed" rel="self" type="application/rss+xml" />
    <title>http://blog.miguelgrinberg.com/category/OpenStack/feed</title>
    <link>http://blog.miguelgrinberg.com/category/OpenStack/feed</link>
    <description></description>
    
    <item>
    	<title>The Rackspace Cloud API</title>
    	<dc:creator>Miguel Grinberg</dc:creator>
    	<link>http://blog.miguelgrinberg.com/post/the-rackspace-cloud-api</link>
    	<description>&lt;p&gt;Most of you know by now that not too long ago I joined &lt;a href=&#34;http://rackspace.com&#34;&gt;Rackspace&lt;/a&gt;. As you can imagine, I am now learning tons of new things as I familiarize myself with all the OpenStack projects, none of which I have used before.&lt;/p&gt;
&lt;p&gt;In this article I&#39;m going to show you a few ways to work more efficiently with your Rackspace cloud account (or any OpenStack cloud for that matter). I will begin with the introduction of a command line tool that you can use to manage your cloud servers, and then go even lower level and show you how you can do the same thing using a Python SDK. To end this article I&#39;m going to show you a complete script that creates a cloud server, configures it as a Web server and deploys a Flask application to it, all completely unattended.&lt;/p&gt;</description>
        <guid>http://blog.miguelgrinberg.com/post/the-rackspace-cloud-api</guid>
        <pubDate>Mon, 04 Aug 2014 05:58:08 GMT</pubDate>
    </item>
    
</channel>
</rss>